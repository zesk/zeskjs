"use strict";

var _DateTools$units;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Copyright &copy; 2017 Market Acumen, Inc.
 */
//const _ = require("lodash");
var Zesk = require("./Zesk");

function zero(x) {
	if (x < 10) {
		return "0" + x;
	}
	return String(x);
}

var DateTools = {
	toString: function toString(d) {
		return d.getUTCFullYear() + "-" + zero(d.getUTCMonth() + 1) + "-" + zero(d.getUTCDate()) + " " + zero(d.getUTCHours()) + ":" + zero(d.getUTCMinutes()) + ":" + zero(d.getUTCSeconds());
	},
	MILLISECOND: "millisecond",
	SECOND: "second",
	MINUTE: "minute",
	HOUR: "hour",
	DAY: "day",
	WEEK: "week",
	WEEKDAY: "weekday",
	MONTH: "month",
	QUARTER: "quarter",
	YEAR: "year",

	formatting: function formatting(d, localizer) {
		if (!localizer) {
			localizer = function localizer(x) {
				return x;
			};
		}
		var h12 = d.getUTCHours() % 12;
		if (h12 === 0) {
			h12 = 12;
		}
		return {
			YYYY: d.getUTCFullYear(),
			M: d.getUTCMonth() + 1,
			MM: zero(d.getUTCMonth() + 1),
			MMM: localizer(DateTools.short_months[d.getUTCMonth()]),
			MMMM: localizer(DateTools.months[d.getUTCMonth()]),
			W: d.getUTCDay(),
			WWW: localizer(DateTools.short_weekdays[d.getUTCDay()]),
			WWWW: localizer(DateTools.weekdays[d.getUTCDay()]),
			D: d.getUTCDate(),
			DD: zero(d.getUTCDate()),
			h: d.getUTCHours(),
			hh: zero(d.getUTCHours()),
			"12h": h12,
			"12hh": zero(h12),
			m: d.getUTCMinutes(),
			mm: zero(d.getUTCMinutes()),
			s: d.getUTCSeconds(),
			ss: zero(d.getUTCSeconds())
		};
	},
	format: function format(d, _format, localizer) {
		return Zesk.map(_format, DateTools.formatting(d, localizer));
	}
};

var SECONDS_IN_MINUTE = 60;
var MINUTES_IN_HOUR = 60;
var HOURS_IN_DAY = 24;
var DAYS_PER_WEEK = 7;
var DAYS_IN_YEAR = 365;
var MONTHS_IN_YEAR = 12;
var QUARTERS_IN_YEAR = 4;

var SECONDS_IN_HOUR = SECONDS_IN_MINUTE * MINUTES_IN_HOUR;
var SECONDS_IN_DAY = SECONDS_IN_HOUR * HOURS_IN_DAY;
var SECONDS_IN_WEEK = SECONDS_IN_DAY * DAYS_PER_WEEK;
var SECONDS_IN_YEAR = SECONDS_IN_DAY * DAYS_IN_YEAR;

DateTools.units = (_DateTools$units = {}, _defineProperty(_DateTools$units, DateTools.MILLISECOND, 0.001), _defineProperty(_DateTools$units, DateTools.SECOND, 1), _defineProperty(_DateTools$units, DateTools.MINUTE, SECONDS_IN_MINUTE), _defineProperty(_DateTools$units, DateTools.HOUR, SECONDS_IN_HOUR), _defineProperty(_DateTools$units, DateTools.DAY, SECONDS_IN_DAY), _defineProperty(_DateTools$units, DateTools.WEEK, SECONDS_IN_WEEK), _defineProperty(_DateTools$units, DateTools.YEAR, SECONDS_IN_YEAR), _defineProperty(_DateTools$units, DateTools.MONTH, SECONDS_IN_YEAR / MONTHS_IN_YEAR), _defineProperty(_DateTools$units, DateTools.QUARTER, SECONDS_IN_YEAR / QUARTERS_IN_YEAR), _DateTools$units);
DateTools.unitsOrder = [DateTools.MILLISECOND, DateTools.SECOND, DateTools.MINUTE, DateTools.HOUR, DateTools.DAY, DateTools.WEEK, DateTools.MONTH, DateTools.YEAR];

var subtract = function subtract(source, timestamp) {
	return source.getTime() - timestamp.getTime();
};

var difference = function difference(source, timestamp) {
	var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DateTools.SECOND;
	var precision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

	if (timestamp.getTime() > source.getTime()) {
		return -difference(timestamp, source, unit, precision);
	}
	if (unit === DateTools.WEEKDAY) {
		return source.getUTCDay() - timestamp.getUTCDay();
	}
	var delta = subtract(source, timestamp);
	delta *= 0.001;
	switch (unit) {
		case DateTools.MILLISECOND:
			return delta * 1000;
		case DateTools.SECOND:
			return delta;
		case DateTools.MINUTE:
			return Math.round(delta / 60.0, precision);
		case DateTools.HOUR:
			return Math.round(delta / 3600.0, precision);
		case DateTools.DAY:
			return Math.round(delta / 86400, precision);
		case DateTools.WEEK:
			return Math.round(delta / (86400 * 7), precision);
	}

	var mstart = timestamp.getUTCMonth(),
	    ystart = timestamp.getUTCFullYear();

	var mend = source.getUTCMonth(),
	    yend = source.getUTCFullYear();

	if (precision === 0) {
		switch (unit) {
			case DateTools.MONTH:
				return (yend - ystart) * 12 + (mend - mstart);
			case DateTools.QUARTER:
				mend = parseInt(mend / 4, 10);
				mstart = parseInt(mstart / 4, 10);
				return (yend - ystart) * 4 + (mend - mstart);
			case DateTools.YEAR:
				return yend - ystart;
			default:
				throw new Error("DateTools.difference(" + source + "," + timestamp + "," + unit + "): Bad unit");
		}
	} else {
		// Works like so:
		//
		// 2/22 -> 3/22 = 1 month
		// 2/12 -> 3/22 = 1 month + ((3/22-2/22) / 28)

		var intmon = (yend - ystart) * 12 + (mend - mstart);
		var total = DateTools.days_in_month(mstart, ystart);

		var temp = new Date();
		temp.setTime(timestamp.getTime());
		temp.setMonth(mstart);
		temp.setYear(ystart);

		var result = null,
		    fract = subtract(temp, source);
		fract = fract / parseFloat(total * 86400);

		switch (unit) {
			case DateTools.MONTH:
				result = Math.round(intmon + fract, precision);

				break;
			case DateTools.QUARTER:
				result = Math.round((intmon + fract) / 3, precision);

				break;
			case DateTools.YEAR:
				result = Math.round((intmon + fract) / 12, precision);

				break;
			default:
				throw new Error("DateTools.difference(" + source + "," + timestamp + "," + unit + "): Bad unit");
		}
		return result;
	}
};
DateTools.difference = difference;

DateTools.findUnit = function (seconds) {
	var result = DateTools.YEAR;
	var units = DateTools.units;
	Zesk.each(DateTools.unitsOrder, function () {
		var sec = units[this];
		if (seconds < sec) {
			return true;
		}
		result = this;
	});
	return result;
};

DateTools.toUnit = function (seconds, unit) {
	if (!DateTools.units[unit]) {
		throw new Error("Unknown unit " + unit + " in DateTools.toUnit");
	}
	return parseFloat(seconds) / DateTools.units[unit];
};

var months = function months() {
	var m = [],
	    d = new Date();
	m.length = MONTHS_IN_YEAR;
	return m.fill(0).map(function (a, i) {
		d.setUTCDate(1);
		d.setUTCMonth(i);
		return d.toDateString().split(" ")[1];
	});
};

DateTools.months = DateTools.short_months = months();

var weekdays = function weekdays() {
	var m = [],
	    d = new Date(),
	    init = void 0;
	d.setUTCFullYear(2019);
	d.setUTCDate(19);
	d.setUTCMonth(3); // Sunday
	d.setUTCHours(0);

	d.setUTCSeconds(0);

	init = d.getTime();
	m.length = DAYS_PER_WEEK;
	return m.fill(0).map(function (a, i) {
		d.setTime(init + 86400 * 1000 * i);
		return d.toDateString().split(" ")[0];
	});
};
DateTools.weekdays = DateTools.short_weekdays = weekdays();

module.exports = DateTools;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,