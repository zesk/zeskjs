"use strict";

var _DateTools$units;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Copyright &copy; 2017 Market Acumen, Inc.
 */
//const _ = require("lodash");
var Zesk = require("./Zesk");

function zero(x) {
	if (x < 10) {
		return "0" + x;
	}
	return String(x);
}

var DateTools = {
	toString: function toString(d) {
		return d.getUTCFullYear() + "-" + zero(d.getUTCMonth() + 1) + "-" + zero(d.getUTCDate()) + " " + zero(d.getUTCHours()) + ":" + zero(d.getUTCMinutes()) + ":" + zero(d.getUTCSeconds());
	},
	MILLISECOND: "millisecond",
	SECOND: "second",
	MINUTE: "minute",
	HOUR: "hour",
	DAY: "day",
	WEEK: "week",
	MONTH: "month",
	QUARTER: "quarter",
	YEAR: "year"
};

var SECONDS_IN_MINUTE = 60;
var MINUTES_IN_HOUR = 60;
var HOURS_IN_DAY = 24;
var DAYS_PER_WEEK = 7;
var DAYS_IN_YEAR = 365;
var MONTHS_IN_YEAR = 12;
var QUARTERS_IN_YEAR = 4;

var SECONDS_IN_HOUR = SECONDS_IN_MINUTE * MINUTES_IN_HOUR;
var SECONDS_IN_DAY = SECONDS_IN_HOUR * HOURS_IN_DAY;
var SECONDS_IN_WEEK = SECONDS_IN_DAY * DAYS_PER_WEEK;
var SECONDS_IN_YEAR = SECONDS_IN_DAY * DAYS_IN_YEAR;

DateTools.units = (_DateTools$units = {}, _defineProperty(_DateTools$units, DateTools.MILLISECOND, 0.001), _defineProperty(_DateTools$units, DateTools.SECOND, 1), _defineProperty(_DateTools$units, DateTools.MINUTE, SECONDS_IN_MINUTE), _defineProperty(_DateTools$units, DateTools.HOUR, SECONDS_IN_HOUR), _defineProperty(_DateTools$units, DateTools.DAY, SECONDS_IN_DAY), _defineProperty(_DateTools$units, DateTools.WEEK, SECONDS_IN_WEEK), _defineProperty(_DateTools$units, DateTools.YEAR, SECONDS_IN_YEAR), _defineProperty(_DateTools$units, DateTools.MONTH, SECONDS_IN_YEAR / MONTHS_IN_YEAR), _defineProperty(_DateTools$units, DateTools.QUARTER, SECONDS_IN_YEAR / QUARTERS_IN_YEAR), _DateTools$units);
DateTools.unitsOrder = [DateTools.MILLISECOND, DateTools.SECOND, DateTools.MINUTE, DateTools.HOUR, DateTools.DAY, DateTools.WEEK, DateTools.YEAR, DateTools.MONTH, DateTools.QUARTER];

DateTools.findUnit = function (seconds) {
	var result = DateTools.YEAR;
	var units = DateTools.units;
	Zesk.each(DateTools.unitsOrder, function () {
		var sec = units[this];
		if (seconds < sec) {
			return true;
		}
		result = this;
	});
	return result;
};

DateTools.toUnit = function (seconds, unit) {
	if (!DateTools.units[unit]) {
		throw new Error("Unknown unit " + unit + " in DateTools.toUnit");
	}
	return parseFloat(seconds) / DateTools.units[unit];
};

module.exports = DateTools;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EYXRlVG9vbHMuanMiXSwibmFtZXMiOlsiWmVzayIsInJlcXVpcmUiLCJ6ZXJvIiwieCIsIlN0cmluZyIsIkRhdGVUb29scyIsInRvU3RyaW5nIiwiZCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIk1JTExJU0VDT05EIiwiU0VDT05EIiwiTUlOVVRFIiwiSE9VUiIsIkRBWSIsIldFRUsiLCJNT05USCIsIlFVQVJURVIiLCJZRUFSIiwiU0VDT05EU19JTl9NSU5VVEUiLCJNSU5VVEVTX0lOX0hPVVIiLCJIT1VSU19JTl9EQVkiLCJEQVlTX1BFUl9XRUVLIiwiREFZU19JTl9ZRUFSIiwiTU9OVEhTX0lOX1lFQVIiLCJRVUFSVEVSU19JTl9ZRUFSIiwiU0VDT05EU19JTl9IT1VSIiwiU0VDT05EU19JTl9EQVkiLCJTRUNPTkRTX0lOX1dFRUsiLCJTRUNPTkRTX0lOX1lFQVIiLCJ1bml0cyIsInVuaXRzT3JkZXIiLCJmaW5kVW5pdCIsInNlY29uZHMiLCJyZXN1bHQiLCJlYWNoIiwic2VjIiwidG9Vbml0IiwidW5pdCIsIkVycm9yIiwicGFyc2VGbG9hdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7QUFHQTtBQUNBLElBQU1BLE9BQU9DLFFBQVEsUUFBUixDQUFiOztBQUVBLFNBQVNDLElBQVQsQ0FBY0MsQ0FBZCxFQUFpQjtBQUNoQixLQUFJQSxJQUFJLEVBQVIsRUFBWTtBQUNYLFNBQU8sTUFBTUEsQ0FBYjtBQUNBO0FBQ0QsUUFBT0MsT0FBT0QsQ0FBUCxDQUFQO0FBQ0E7O0FBRUQsSUFBSUUsWUFBWTtBQUNmQyxXQUFVLGtCQUFTQyxDQUFULEVBQVk7QUFDckIsU0FDQ0EsRUFBRUMsY0FBRixLQUNBLEdBREEsR0FFQU4sS0FBS0ssRUFBRUUsV0FBRixLQUFrQixDQUF2QixDQUZBLEdBR0EsR0FIQSxHQUlBUCxLQUFLSyxFQUFFRyxVQUFGLEVBQUwsQ0FKQSxHQUtBLEdBTEEsR0FNQVIsS0FBS0ssRUFBRUksV0FBRixFQUFMLENBTkEsR0FPQSxHQVBBLEdBUUFULEtBQUtLLEVBQUVLLGFBQUYsRUFBTCxDQVJBLEdBU0EsR0FUQSxHQVVBVixLQUFLSyxFQUFFTSxhQUFGLEVBQUwsQ0FYRDtBQWFBLEVBZmM7QUFnQmZDLGNBQWEsYUFoQkU7QUFpQmZDLFNBQVEsUUFqQk87QUFrQmZDLFNBQVEsUUFsQk87QUFtQmZDLE9BQU0sTUFuQlM7QUFvQmZDLE1BQUssS0FwQlU7QUFxQmZDLE9BQU0sTUFyQlM7QUFzQmZDLFFBQU8sT0F0QlE7QUF1QmZDLFVBQVMsU0F2Qk07QUF3QmZDLE9BQU07QUF4QlMsQ0FBaEI7O0FBMkJBLElBQU1DLG9CQUFvQixFQUExQjtBQUNBLElBQU1DLGtCQUFrQixFQUF4QjtBQUNBLElBQU1DLGVBQWUsRUFBckI7QUFDQSxJQUFNQyxnQkFBZ0IsQ0FBdEI7QUFDQSxJQUFNQyxlQUFlLEdBQXJCO0FBQ0EsSUFBTUMsaUJBQWlCLEVBQXZCO0FBQ0EsSUFBTUMsbUJBQW1CLENBQXpCOztBQUVBLElBQU1DLGtCQUFrQlAsb0JBQW9CQyxlQUE1QztBQUNBLElBQU1PLGlCQUFpQkQsa0JBQWtCTCxZQUF6QztBQUNBLElBQU1PLGtCQUFrQkQsaUJBQWlCTCxhQUF6QztBQUNBLElBQU1PLGtCQUFrQkYsaUJBQWlCSixZQUF6Qzs7QUFFQXRCLFVBQVU2QixLQUFWLDZEQUNFN0IsVUFBVVMsV0FEWixFQUMwQixLQUQxQixxQ0FFRVQsVUFBVVUsTUFGWixFQUVxQixDQUZyQixxQ0FHRVYsVUFBVVcsTUFIWixFQUdxQk8saUJBSHJCLHFDQUlFbEIsVUFBVVksSUFKWixFQUltQmEsZUFKbkIscUNBS0V6QixVQUFVYSxHQUxaLEVBS2tCYSxjQUxsQixxQ0FNRTFCLFVBQVVjLElBTlosRUFNbUJhLGVBTm5CLHFDQU9FM0IsVUFBVWlCLElBUFosRUFPbUJXLGVBUG5CLHFDQVFFNUIsVUFBVWUsS0FSWixFQVFvQmEsa0JBQWtCTCxjQVJ0QyxxQ0FTRXZCLFVBQVVnQixPQVRaLEVBU3NCWSxrQkFBa0JKLGdCQVR4QztBQVdBeEIsVUFBVThCLFVBQVYsR0FBdUIsQ0FDdEI5QixVQUFVUyxXQURZLEVBRXRCVCxVQUFVVSxNQUZZLEVBR3RCVixVQUFVVyxNQUhZLEVBSXRCWCxVQUFVWSxJQUpZLEVBS3RCWixVQUFVYSxHQUxZLEVBTXRCYixVQUFVYyxJQU5ZLEVBT3RCZCxVQUFVaUIsSUFQWSxFQVF0QmpCLFVBQVVlLEtBUlksRUFTdEJmLFVBQVVnQixPQVRZLENBQXZCOztBQVlBaEIsVUFBVStCLFFBQVYsR0FBcUIsVUFBU0MsT0FBVCxFQUFrQjtBQUN0QyxLQUFJQyxTQUFTakMsVUFBVWlCLElBQXZCO0FBQ0EsS0FBTVksUUFBUTdCLFVBQVU2QixLQUF4QjtBQUNBbEMsTUFBS3VDLElBQUwsQ0FBVWxDLFVBQVU4QixVQUFwQixFQUFnQyxZQUFXO0FBQzFDLE1BQUlLLE1BQU1OLE1BQU0sSUFBTixDQUFWO0FBQ0EsTUFBSUcsVUFBVUcsR0FBZCxFQUFtQjtBQUNsQixVQUFPLElBQVA7QUFDQTtBQUNERixXQUFTLElBQVQ7QUFDQSxFQU5EO0FBT0EsUUFBT0EsTUFBUDtBQUNBLENBWEQ7O0FBYUFqQyxVQUFVb0MsTUFBVixHQUFtQixVQUFTSixPQUFULEVBQWtCSyxJQUFsQixFQUF3QjtBQUMxQyxLQUFJLENBQUNyQyxVQUFVNkIsS0FBVixDQUFnQlEsSUFBaEIsQ0FBTCxFQUE0QjtBQUMzQixRQUFNLElBQUlDLEtBQUosQ0FBVSxrQkFBa0JELElBQWxCLEdBQXlCLHNCQUFuQyxDQUFOO0FBQ0E7QUFDRCxRQUFPRSxXQUFXUCxPQUFYLElBQXNCaEMsVUFBVTZCLEtBQVYsQ0FBZ0JRLElBQWhCLENBQTdCO0FBQ0EsQ0FMRDs7QUFPQUcsT0FBT0MsT0FBUCxHQUFpQnpDLFNBQWpCIiwiZmlsZSI6IkRhdGVUb29scy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0ICZjb3B5OyAyMDE3IE1hcmtldCBBY3VtZW4sIEluYy5cbiAqL1xuLy9jb25zdCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmNvbnN0IFplc2sgPSByZXF1aXJlKFwiLi9aZXNrXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKHgpIHtcblx0aWYgKHggPCAxMCkge1xuXHRcdHJldHVybiBcIjBcIiArIHg7XG5cdH1cblx0cmV0dXJuIFN0cmluZyh4KTtcbn1cblxudmFyIERhdGVUb29scyA9IHtcblx0dG9TdHJpbmc6IGZ1bmN0aW9uKGQpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0ZC5nZXRVVENGdWxsWWVhcigpICtcblx0XHRcdFwiLVwiICtcblx0XHRcdHplcm8oZC5nZXRVVENNb250aCgpICsgMSkgK1xuXHRcdFx0XCItXCIgK1xuXHRcdFx0emVybyhkLmdldFVUQ0RhdGUoKSkgK1xuXHRcdFx0XCIgXCIgK1xuXHRcdFx0emVybyhkLmdldFVUQ0hvdXJzKCkpICtcblx0XHRcdFwiOlwiICtcblx0XHRcdHplcm8oZC5nZXRVVENNaW51dGVzKCkpICtcblx0XHRcdFwiOlwiICtcblx0XHRcdHplcm8oZC5nZXRVVENTZWNvbmRzKCkpXG5cdFx0KTtcblx0fSxcblx0TUlMTElTRUNPTkQ6IFwibWlsbGlzZWNvbmRcIixcblx0U0VDT05EOiBcInNlY29uZFwiLFxuXHRNSU5VVEU6IFwibWludXRlXCIsXG5cdEhPVVI6IFwiaG91clwiLFxuXHREQVk6IFwiZGF5XCIsXG5cdFdFRUs6IFwid2Vla1wiLFxuXHRNT05USDogXCJtb250aFwiLFxuXHRRVUFSVEVSOiBcInF1YXJ0ZXJcIixcblx0WUVBUjogXCJ5ZWFyXCIsXG59O1xuXG5jb25zdCBTRUNPTkRTX0lOX01JTlVURSA9IDYwO1xuY29uc3QgTUlOVVRFU19JTl9IT1VSID0gNjA7XG5jb25zdCBIT1VSU19JTl9EQVkgPSAyNDtcbmNvbnN0IERBWVNfUEVSX1dFRUsgPSA3O1xuY29uc3QgREFZU19JTl9ZRUFSID0gMzY1O1xuY29uc3QgTU9OVEhTX0lOX1lFQVIgPSAxMjtcbmNvbnN0IFFVQVJURVJTX0lOX1lFQVIgPSA0O1xuXG5jb25zdCBTRUNPTkRTX0lOX0hPVVIgPSBTRUNPTkRTX0lOX01JTlVURSAqIE1JTlVURVNfSU5fSE9VUjtcbmNvbnN0IFNFQ09ORFNfSU5fREFZID0gU0VDT05EU19JTl9IT1VSICogSE9VUlNfSU5fREFZO1xuY29uc3QgU0VDT05EU19JTl9XRUVLID0gU0VDT05EU19JTl9EQVkgKiBEQVlTX1BFUl9XRUVLO1xuY29uc3QgU0VDT05EU19JTl9ZRUFSID0gU0VDT05EU19JTl9EQVkgKiBEQVlTX0lOX1lFQVI7XG5cbkRhdGVUb29scy51bml0cyA9IHtcblx0W0RhdGVUb29scy5NSUxMSVNFQ09ORF06IDAuMDAxLFxuXHRbRGF0ZVRvb2xzLlNFQ09ORF06IDEsXG5cdFtEYXRlVG9vbHMuTUlOVVRFXTogU0VDT05EU19JTl9NSU5VVEUsXG5cdFtEYXRlVG9vbHMuSE9VUl06IFNFQ09ORFNfSU5fSE9VUixcblx0W0RhdGVUb29scy5EQVldOiBTRUNPTkRTX0lOX0RBWSxcblx0W0RhdGVUb29scy5XRUVLXTogU0VDT05EU19JTl9XRUVLLFxuXHRbRGF0ZVRvb2xzLllFQVJdOiBTRUNPTkRTX0lOX1lFQVIsXG5cdFtEYXRlVG9vbHMuTU9OVEhdOiBTRUNPTkRTX0lOX1lFQVIgLyBNT05USFNfSU5fWUVBUixcblx0W0RhdGVUb29scy5RVUFSVEVSXTogU0VDT05EU19JTl9ZRUFSIC8gUVVBUlRFUlNfSU5fWUVBUixcbn07XG5EYXRlVG9vbHMudW5pdHNPcmRlciA9IFtcblx0RGF0ZVRvb2xzLk1JTExJU0VDT05ELFxuXHREYXRlVG9vbHMuU0VDT05ELFxuXHREYXRlVG9vbHMuTUlOVVRFLFxuXHREYXRlVG9vbHMuSE9VUixcblx0RGF0ZVRvb2xzLkRBWSxcblx0RGF0ZVRvb2xzLldFRUssXG5cdERhdGVUb29scy5ZRUFSLFxuXHREYXRlVG9vbHMuTU9OVEgsXG5cdERhdGVUb29scy5RVUFSVEVSLFxuXTtcblxuRGF0ZVRvb2xzLmZpbmRVbml0ID0gZnVuY3Rpb24oc2Vjb25kcykge1xuXHRsZXQgcmVzdWx0ID0gRGF0ZVRvb2xzLllFQVI7XG5cdGNvbnN0IHVuaXRzID0gRGF0ZVRvb2xzLnVuaXRzO1xuXHRaZXNrLmVhY2goRGF0ZVRvb2xzLnVuaXRzT3JkZXIsIGZ1bmN0aW9uKCkge1xuXHRcdGxldCBzZWMgPSB1bml0c1t0aGlzXTtcblx0XHRpZiAoc2Vjb25kcyA8IHNlYykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJlc3VsdCA9IHRoaXM7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuRGF0ZVRvb2xzLnRvVW5pdCA9IGZ1bmN0aW9uKHNlY29uZHMsIHVuaXQpIHtcblx0aWYgKCFEYXRlVG9vbHMudW5pdHNbdW5pdF0pIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHVuaXQgXCIgKyB1bml0ICsgXCIgaW4gRGF0ZVRvb2xzLnRvVW5pdFwiKTtcblx0fVxuXHRyZXR1cm4gcGFyc2VGbG9hdChzZWNvbmRzKSAvIERhdGVUb29scy51bml0c1t1bml0XTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVRvb2xzO1xuIl19