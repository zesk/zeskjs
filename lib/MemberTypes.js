"use strict";

/**
 * Copyright &copy; 2017 Market Acumen, Inc.
 */
var _ = require("lodash");
var Zesk = require("./Zesk");
var DateTools = require("./DateTools");

var datetimeclean = function datetimeclean(v) {
	if (_.isDate(v)) {
		return DateTools.toString(v);
	}
	return String(v);
};
var timeclean = function timeclean(v) {
	if (_.isDate(v)) {
		return DateTools.toString(v);
	}
	return String(v);
};
var floatclean = function floatclean(v) {
	return parseFloat(v) || null;
};
var intclean = function intclean(v) {
	return parseInt(v, 10);
};
var stringclean = function stringclean(v) {
	return String(v);
};
var booltruths = ["t", "1", "true", "y", "yes", "on"];
var booleanclean = function booleanclean(v) {
	return _.isString(v) ? _.indexOf(booltruths, v.toLowerCase()) >= 0 ? true : false : v ? true : false;
};

/**
 * Convert from internal representation to a string
 */
var serializers = {
	id: intclean,
	string: stringclean,
	text: stringclean,
	created: datetimeclean,
	modified: datetimeclean,
	timestamp: datetimeclean,
	date: datetimeclean,
	time: timeclean,
	integer: intclean,
	float: floatclean,
	decimal: floatclean,
	boolean: booleanclean,
	binary: stringclean,
	object: function object(v) {
		if (_.isNumber(v)) {
			return parseInt(v, 10);
		}
		return String(v);
	}
};

var datetimefactory = function datetimefactory(v) {
	return v === null ? null : new Date(v);
};
var datefactory = datetimefactory;
var timefactory = datetimefactory;

/**
 * Convert from string to internal representation
 */
var unserializers = {
	id: Zesk.to_integer,
	string: Zesk.to_string,
	text: Zesk.to_string,
	created: datetimefactory,
	modified: datetimefactory,
	timestamp: datetimefactory,
	date: datefactory,
	time: timefactory,
	integer: Zesk.to_integer,
	float: Zesk.to_double,
	decimal: Zesk.to_double,
	boolean: Zesk.to_boolean,
	binary: Zesk.to_string,
	object: function object(v) {
		return v;
	}
};

module.exports = {
	constants: {
		id: "id",
		string: "string",
		text: "text",
		created: "created",
		modified: "modified",
		timestamp: "timestamp",
		date: "date",
		time: "time",
		integer: "integer",
		float: "float",
		decimal: "decimal",
		boolean: "boolean",
		binary: "binary",
		object: "object",
		ip: "ip"
	},
	serializers: serializers,
	unserializers: unserializers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NZW1iZXJUeXBlcy5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlplc2siLCJEYXRlVG9vbHMiLCJkYXRldGltZWNsZWFuIiwiaXNEYXRlIiwidiIsInRvU3RyaW5nIiwiU3RyaW5nIiwidGltZWNsZWFuIiwiZmxvYXRjbGVhbiIsInBhcnNlRmxvYXQiLCJpbnRjbGVhbiIsInBhcnNlSW50Iiwic3RyaW5nY2xlYW4iLCJib29sdHJ1dGhzIiwiYm9vbGVhbmNsZWFuIiwiaXNTdHJpbmciLCJpbmRleE9mIiwidG9Mb3dlckNhc2UiLCJzZXJpYWxpemVycyIsImlkIiwic3RyaW5nIiwidGV4dCIsImNyZWF0ZWQiLCJtb2RpZmllZCIsInRpbWVzdGFtcCIsImRhdGUiLCJ0aW1lIiwiaW50ZWdlciIsImZsb2F0IiwiZGVjaW1hbCIsImJvb2xlYW4iLCJiaW5hcnkiLCJvYmplY3QiLCJpc051bWJlciIsImRhdGV0aW1lZmFjdG9yeSIsIkRhdGUiLCJkYXRlZmFjdG9yeSIsInRpbWVmYWN0b3J5IiwidW5zZXJpYWxpemVycyIsInRvX2ludGVnZXIiLCJ0b19zdHJpbmciLCJ0b19kb3VibGUiLCJ0b19ib29sZWFuIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0YW50cyIsImlwIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7QUFHQSxJQUFJQSxJQUFJQyxRQUFRLFFBQVIsQ0FBUjtBQUNBLElBQUlDLE9BQU9ELFFBQVEsUUFBUixDQUFYO0FBQ0EsSUFBSUUsWUFBWUYsUUFBUSxhQUFSLENBQWhCOztBQUVBLElBQUlHLGdCQUFnQixTQUFoQkEsYUFBZ0IsSUFBSztBQUN4QixLQUFJSixFQUFFSyxNQUFGLENBQVNDLENBQVQsQ0FBSixFQUFpQjtBQUNoQixTQUFPSCxVQUFVSSxRQUFWLENBQW1CRCxDQUFuQixDQUFQO0FBQ0E7QUFDRCxRQUFPRSxPQUFPRixDQUFQLENBQVA7QUFDQSxDQUxEO0FBTUEsSUFBSUcsWUFBWSxTQUFaQSxTQUFZLElBQUs7QUFDcEIsS0FBSVQsRUFBRUssTUFBRixDQUFTQyxDQUFULENBQUosRUFBaUI7QUFDaEIsU0FBT0gsVUFBVUksUUFBVixDQUFtQkQsQ0FBbkIsQ0FBUDtBQUNBO0FBQ0QsUUFBT0UsT0FBT0YsQ0FBUCxDQUFQO0FBQ0EsQ0FMRDtBQU1BLElBQUlJLGFBQWEsU0FBYkEsVUFBYSxJQUFLO0FBQ3JCLFFBQU9DLFdBQVdMLENBQVgsS0FBaUIsSUFBeEI7QUFDQSxDQUZEO0FBR0EsSUFBSU0sV0FBVyxTQUFYQSxRQUFXLElBQUs7QUFDbkIsUUFBT0MsU0FBU1AsQ0FBVCxFQUFZLEVBQVosQ0FBUDtBQUNBLENBRkQ7QUFHQSxJQUFJUSxjQUFjLFNBQWRBLFdBQWMsSUFBSztBQUN0QixRQUFPTixPQUFPRixDQUFQLENBQVA7QUFDQSxDQUZEO0FBR0EsSUFBSVMsYUFBYSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsTUFBWCxFQUFtQixHQUFuQixFQUF3QixLQUF4QixFQUErQixJQUEvQixDQUFqQjtBQUNBLElBQUlDLGVBQWUsU0FBZkEsWUFBZSxJQUFLO0FBQ3ZCLFFBQU9oQixFQUFFaUIsUUFBRixDQUFXWCxDQUFYLElBQWlCTixFQUFFa0IsT0FBRixDQUFVSCxVQUFWLEVBQXNCVCxFQUFFYSxXQUFGLEVBQXRCLEtBQTBDLENBQTFDLEdBQThDLElBQTlDLEdBQXFELEtBQXRFLEdBQStFYixJQUFJLElBQUosR0FBVyxLQUFqRztBQUNBLENBRkQ7O0FBSUE7OztBQUdBLElBQUljLGNBQWM7QUFDakJDLEtBQUlULFFBRGE7QUFFakJVLFNBQVFSLFdBRlM7QUFHakJTLE9BQU1ULFdBSFc7QUFJakJVLFVBQVNwQixhQUpRO0FBS2pCcUIsV0FBVXJCLGFBTE87QUFNakJzQixZQUFXdEIsYUFOTTtBQU9qQnVCLE9BQU12QixhQVBXO0FBUWpCd0IsT0FBTW5CLFNBUlc7QUFTakJvQixVQUFTakIsUUFUUTtBQVVqQmtCLFFBQU9wQixVQVZVO0FBV2pCcUIsVUFBU3JCLFVBWFE7QUFZakJzQixVQUFTaEIsWUFaUTtBQWFqQmlCLFNBQVFuQixXQWJTO0FBY2pCb0IsU0FBUSxtQkFBSztBQUNaLE1BQUlsQyxFQUFFbUMsUUFBRixDQUFXN0IsQ0FBWCxDQUFKLEVBQW1CO0FBQ2xCLFVBQU9PLFNBQVNQLENBQVQsRUFBWSxFQUFaLENBQVA7QUFDQTtBQUNELFNBQU9FLE9BQU9GLENBQVAsQ0FBUDtBQUNBO0FBbkJnQixDQUFsQjs7QUFzQkEsSUFBSThCLGtCQUFrQixTQUFsQkEsZUFBa0IsQ0FBUzlCLENBQVQsRUFBWTtBQUNqQyxRQUFPQSxNQUFNLElBQU4sR0FBYSxJQUFiLEdBQW9CLElBQUkrQixJQUFKLENBQVMvQixDQUFULENBQTNCO0FBQ0EsQ0FGRDtBQUdBLElBQUlnQyxjQUFjRixlQUFsQjtBQUNBLElBQUlHLGNBQWNILGVBQWxCOztBQUVBOzs7QUFHQSxJQUFJSSxnQkFBZ0I7QUFDbkJuQixLQUFJbkIsS0FBS3VDLFVBRFU7QUFFbkJuQixTQUFRcEIsS0FBS3dDLFNBRk07QUFHbkJuQixPQUFNckIsS0FBS3dDLFNBSFE7QUFJbkJsQixVQUFTWSxlQUpVO0FBS25CWCxXQUFVVyxlQUxTO0FBTW5CVixZQUFXVSxlQU5RO0FBT25CVCxPQUFNVyxXQVBhO0FBUW5CVixPQUFNVyxXQVJhO0FBU25CVixVQUFTM0IsS0FBS3VDLFVBVEs7QUFVbkJYLFFBQU81QixLQUFLeUMsU0FWTztBQVduQlosVUFBUzdCLEtBQUt5QyxTQVhLO0FBWW5CWCxVQUFTOUIsS0FBSzBDLFVBWks7QUFhbkJYLFNBQVEvQixLQUFLd0MsU0FiTTtBQWNuQlIsU0FBUSxtQkFBSztBQUNaLFNBQU81QixDQUFQO0FBQ0E7QUFoQmtCLENBQXBCOztBQW1CQXVDLE9BQU9DLE9BQVAsR0FBaUI7QUFDaEJDLFlBQVc7QUFDVjFCLE1BQUksSUFETTtBQUVWQyxVQUFRLFFBRkU7QUFHVkMsUUFBTSxNQUhJO0FBSVZDLFdBQVMsU0FKQztBQUtWQyxZQUFVLFVBTEE7QUFNVkMsYUFBVyxXQU5EO0FBT1ZDLFFBQU0sTUFQSTtBQVFWQyxRQUFNLE1BUkk7QUFTVkMsV0FBUyxTQVRDO0FBVVZDLFNBQU8sT0FWRztBQVdWQyxXQUFTLFNBWEM7QUFZVkMsV0FBUyxTQVpDO0FBYVZDLFVBQVEsUUFiRTtBQWNWQyxVQUFRLFFBZEU7QUFlVmMsTUFBSTtBQWZNLEVBREs7QUFrQmhCNUIsY0FBYUEsV0FsQkc7QUFtQmhCb0IsZ0JBQWVBO0FBbkJDLENBQWpCIiwiZmlsZSI6Ik1lbWJlclR5cGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgJmNvcHk7IDIwMTcgTWFya2V0IEFjdW1lbiwgSW5jLlxuICovXG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgWmVzayA9IHJlcXVpcmUoXCIuL1plc2tcIik7XG5sZXQgRGF0ZVRvb2xzID0gcmVxdWlyZShcIi4vRGF0ZVRvb2xzXCIpO1xuXG5sZXQgZGF0ZXRpbWVjbGVhbiA9IHYgPT4ge1xuXHRpZiAoXy5pc0RhdGUodikpIHtcblx0XHRyZXR1cm4gRGF0ZVRvb2xzLnRvU3RyaW5nKHYpO1xuXHR9XG5cdHJldHVybiBTdHJpbmcodik7XG59O1xubGV0IHRpbWVjbGVhbiA9IHYgPT4ge1xuXHRpZiAoXy5pc0RhdGUodikpIHtcblx0XHRyZXR1cm4gRGF0ZVRvb2xzLnRvU3RyaW5nKHYpO1xuXHR9XG5cdHJldHVybiBTdHJpbmcodik7XG59O1xubGV0IGZsb2F0Y2xlYW4gPSB2ID0+IHtcblx0cmV0dXJuIHBhcnNlRmxvYXQodikgfHwgbnVsbDtcbn07XG5sZXQgaW50Y2xlYW4gPSB2ID0+IHtcblx0cmV0dXJuIHBhcnNlSW50KHYsIDEwKTtcbn07XG5sZXQgc3RyaW5nY2xlYW4gPSB2ID0+IHtcblx0cmV0dXJuIFN0cmluZyh2KTtcbn07XG5sZXQgYm9vbHRydXRocyA9IFtcInRcIiwgXCIxXCIsIFwidHJ1ZVwiLCBcInlcIiwgXCJ5ZXNcIiwgXCJvblwiXTtcbmxldCBib29sZWFuY2xlYW4gPSB2ID0+IHtcblx0cmV0dXJuIF8uaXNTdHJpbmcodikgPyAoXy5pbmRleE9mKGJvb2x0cnV0aHMsIHYudG9Mb3dlckNhc2UoKSkgPj0gMCA/IHRydWUgOiBmYWxzZSkgOiB2ID8gdHJ1ZSA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGZyb20gaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gdG8gYSBzdHJpbmdcbiAqL1xubGV0IHNlcmlhbGl6ZXJzID0ge1xuXHRpZDogaW50Y2xlYW4sXG5cdHN0cmluZzogc3RyaW5nY2xlYW4sXG5cdHRleHQ6IHN0cmluZ2NsZWFuLFxuXHRjcmVhdGVkOiBkYXRldGltZWNsZWFuLFxuXHRtb2RpZmllZDogZGF0ZXRpbWVjbGVhbixcblx0dGltZXN0YW1wOiBkYXRldGltZWNsZWFuLFxuXHRkYXRlOiBkYXRldGltZWNsZWFuLFxuXHR0aW1lOiB0aW1lY2xlYW4sXG5cdGludGVnZXI6IGludGNsZWFuLFxuXHRmbG9hdDogZmxvYXRjbGVhbixcblx0ZGVjaW1hbDogZmxvYXRjbGVhbixcblx0Ym9vbGVhbjogYm9vbGVhbmNsZWFuLFxuXHRiaW5hcnk6IHN0cmluZ2NsZWFuLFxuXHRvYmplY3Q6IHYgPT4ge1xuXHRcdGlmIChfLmlzTnVtYmVyKHYpKSB7XG5cdFx0XHRyZXR1cm4gcGFyc2VJbnQodiwgMTApO1xuXHRcdH1cblx0XHRyZXR1cm4gU3RyaW5nKHYpO1xuXHR9LFxufTtcblxubGV0IGRhdGV0aW1lZmFjdG9yeSA9IGZ1bmN0aW9uKHYpIHtcblx0cmV0dXJuIHYgPT09IG51bGwgPyBudWxsIDogbmV3IERhdGUodik7XG59O1xubGV0IGRhdGVmYWN0b3J5ID0gZGF0ZXRpbWVmYWN0b3J5O1xubGV0IHRpbWVmYWN0b3J5ID0gZGF0ZXRpbWVmYWN0b3J5O1xuXG4vKipcbiAqIENvbnZlcnQgZnJvbSBzdHJpbmcgdG8gaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAqL1xubGV0IHVuc2VyaWFsaXplcnMgPSB7XG5cdGlkOiBaZXNrLnRvX2ludGVnZXIsXG5cdHN0cmluZzogWmVzay50b19zdHJpbmcsXG5cdHRleHQ6IFplc2sudG9fc3RyaW5nLFxuXHRjcmVhdGVkOiBkYXRldGltZWZhY3RvcnksXG5cdG1vZGlmaWVkOiBkYXRldGltZWZhY3RvcnksXG5cdHRpbWVzdGFtcDogZGF0ZXRpbWVmYWN0b3J5LFxuXHRkYXRlOiBkYXRlZmFjdG9yeSxcblx0dGltZTogdGltZWZhY3RvcnksXG5cdGludGVnZXI6IFplc2sudG9faW50ZWdlcixcblx0ZmxvYXQ6IFplc2sudG9fZG91YmxlLFxuXHRkZWNpbWFsOiBaZXNrLnRvX2RvdWJsZSxcblx0Ym9vbGVhbjogWmVzay50b19ib29sZWFuLFxuXHRiaW5hcnk6IFplc2sudG9fc3RyaW5nLFxuXHRvYmplY3Q6IHYgPT4ge1xuXHRcdHJldHVybiB2O1xuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNvbnN0YW50czoge1xuXHRcdGlkOiBcImlkXCIsXG5cdFx0c3RyaW5nOiBcInN0cmluZ1wiLFxuXHRcdHRleHQ6IFwidGV4dFwiLFxuXHRcdGNyZWF0ZWQ6IFwiY3JlYXRlZFwiLFxuXHRcdG1vZGlmaWVkOiBcIm1vZGlmaWVkXCIsXG5cdFx0dGltZXN0YW1wOiBcInRpbWVzdGFtcFwiLFxuXHRcdGRhdGU6IFwiZGF0ZVwiLFxuXHRcdHRpbWU6IFwidGltZVwiLFxuXHRcdGludGVnZXI6IFwiaW50ZWdlclwiLFxuXHRcdGZsb2F0OiBcImZsb2F0XCIsXG5cdFx0ZGVjaW1hbDogXCJkZWNpbWFsXCIsXG5cdFx0Ym9vbGVhbjogXCJib29sZWFuXCIsXG5cdFx0YmluYXJ5OiBcImJpbmFyeVwiLFxuXHRcdG9iamVjdDogXCJvYmplY3RcIixcblx0XHRpcDogXCJpcFwiLFxuXHR9LFxuXHRzZXJpYWxpemVyczogc2VyaWFsaXplcnMsXG5cdHVuc2VyaWFsaXplcnM6IHVuc2VyaWFsaXplcnMsXG59O1xuIl19