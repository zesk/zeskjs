'use strict';

/*
 * $Id$
 *
 * Copyright (C) 2017 Market Acumen, Inc. All rights reserved
 */
var $ = require('jquery');
var Zesk = require('./Zesk');

var URL = function URL(mixed) {
	"use strict";

	var self = this;
	$.each(this.keys, function () {
		self[this] = null;
	});
	if (is_object(mixed)) {
		$.each(this.keys, function () {
			if (mixed[this]) {
				self[this] = mixed[this];
			}
		});
	} else if (zesk.is_url(mixed)) {
		this.parse(mixed);
	} else if (zesk.is_string(mixed)) {
		this.path = mixed;
	}
};
$.extend(URL.prototype, {
	keys: ["url", "scheme", "user", "pass", "host", "port", "path", "query", "hash"],
	_query: function _query(mixed) {
		if (mixed === undefined) {
			return this.query || null;
		}
		if (zesk.is_string(mixed)) {
			if (mixed.charAt(0) !== "?") {
				mixed = "?" + mixed;
			}
		} else if (zesk.is_object(mixed)) {
			var items = [];
			$.each(mixed, function (k) {
				if (this === null || this === undefined || this === "") {
					return;
				}
				items.push(encodeURIComponent(k) + "=" + encodeURIComponent(this));
			});
			mixed = "?" + items.join("&");
		}
		this.query = mixed;
		this.unparse();
		return this;
	},
	default_port: function default_port() {
		var ports = {
			"http": 80,
			"https": 443,
			"ftp": 21
		};
		return ports[this.scheme] || null;
	},
	parse: function parse(url) {
		var parser = d.createElement('a');
		parser.href = url;
		this.url = url;
		this.scheme = String(parser.protocol).replace(/:$/, '');
		this.host = parser.hostname;
		this.port = parser.port;
		this.path = parser.pathname;
		this.query = parser.search;
		this.hash = parser.hash;
		return this;
	},
	unparse: function unparse() {
		var user = this.user ? this.user + (this.pass ? ":" + this.pass : "") + "@" : "";
		var port = this.port ? this.port === this.default_port() ? "" : ":" + this.port : "";
		var prefix = this.scheme ? this.scheme + ":" : "";
		var uhp = this.host ? "//" + user + this.host + port : "";
		this.url = prefix + uhp + this.path + this.query + (this.hash ? this.hash : "");
		return this.url;
	}
});
module.exports = URL;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9VUkwuanMiXSwibmFtZXMiOlsiJCIsInJlcXVpcmUiLCJaZXNrIiwiVVJMIiwibWl4ZWQiLCJzZWxmIiwiZWFjaCIsImtleXMiLCJpc19vYmplY3QiLCJ6ZXNrIiwiaXNfdXJsIiwicGFyc2UiLCJpc19zdHJpbmciLCJwYXRoIiwiZXh0ZW5kIiwicHJvdG90eXBlIiwiX3F1ZXJ5IiwidW5kZWZpbmVkIiwicXVlcnkiLCJjaGFyQXQiLCJpdGVtcyIsImsiLCJwdXNoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsInVucGFyc2UiLCJkZWZhdWx0X3BvcnQiLCJwb3J0cyIsInNjaGVtZSIsInVybCIsInBhcnNlciIsImQiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsIlN0cmluZyIsInByb3RvY29sIiwicmVwbGFjZSIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJ1c2VyIiwicGFzcyIsInByZWZpeCIsInVocCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0FBS0EsSUFBTUEsSUFBSUMsUUFBUSxRQUFSLENBQVY7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLFFBQVIsQ0FBYjs7QUFFQSxJQUFJRSxNQUFNLFNBQU5BLEdBQU0sQ0FBVUMsS0FBVixFQUFpQjtBQUMxQjs7QUFDQSxLQUFJQyxPQUFPLElBQVg7QUFDQUwsR0FBRU0sSUFBRixDQUFPLEtBQUtDLElBQVosRUFBa0IsWUFBWTtBQUM3QkYsT0FBSyxJQUFMLElBQWEsSUFBYjtBQUNBLEVBRkQ7QUFHQSxLQUFJRyxVQUFVSixLQUFWLENBQUosRUFBc0I7QUFDckJKLElBQUVNLElBQUYsQ0FBTyxLQUFLQyxJQUFaLEVBQWtCLFlBQVk7QUFDN0IsT0FBSUgsTUFBTSxJQUFOLENBQUosRUFBaUI7QUFDaEJDLFNBQUssSUFBTCxJQUFhRCxNQUFNLElBQU4sQ0FBYjtBQUNBO0FBQ0QsR0FKRDtBQUtBLEVBTkQsTUFN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LEdBQWMsR0FBNUIsR0FBa0MsRUFBL0M7QUFDQSxNQUFJa0IsTUFBTSxLQUFLVCxJQUFMLEdBQVksT0FBT00sSUFBUCxHQUFjLEtBQUtOLElBQW5CLEdBQTBCRSxJQUF0QyxHQUE2QyxFQUF2RDtBQUNBLE9BQUtWLEdBQUwsR0FBV2dCLFNBQVNDLEdBQVQsR0FBZSxLQUFLakMsSUFBcEIsR0FBMkIsS0FBS0ssS0FBaEMsSUFBeUMsS0FBS3dCLElBQUwsR0FBWSxLQUFLQSxJQUFqQixHQUF3QixFQUFqRSxDQUFYO0FBQ0EsU0FBTyxLQUFLYixHQUFaO0FBQ0E7QUFuRHNCLENBQXhCO0FBcURBa0IsT0FBT0MsT0FBUCxHQUFpQjdDLEdBQWpCIiwiZmlsZSI6IlVSTC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAkSWQkXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE3IE1hcmtldCBBY3VtZW4sIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZFxuICovXG5jb25zdCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5jb25zdCBaZXNrID0gcmVxdWlyZSgnLi9aZXNrJyk7XG5cbnZhciBVUkwgPSBmdW5jdGlvbiAobWl4ZWQpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBzZWxmID0gdGhpcztcblx0JC5lYWNoKHRoaXMua2V5cywgZnVuY3Rpb24gKCkge1xuXHRcdHNlbGZbdGhpc10gPSBudWxsO1xuXHR9KTtcblx0aWYgKGlzX29iamVjdChtaXhlZCkpIHtcblx0XHQkLmVhY2godGhpcy5rZXlzLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAobWl4ZWRbdGhpc10pIHtcblx0XHRcdFx0c2VsZlt0aGlzXSA9IG1peGVkW3RoaXNdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKHplc2suaXNfdXJsKG1peGVkKSkgeyBcblx0XHR0aGlzLnBhcnNlKG1peGVkKTtcblx0fSBlbHNlIGlmICh6ZXNrLmlzX3N0cmluZyhtaXhlZCkpIHtcblx0XHR0aGlzLnBhdGggPSBtaXhlZDtcblx0fVxufTtcbiQuZXh0ZW5kKFVSTC5wcm90b3R5cGUsIHtcblx0a2V5czogWyBcInVybFwiLCBcInNjaGVtZVwiLCBcInVzZXJcIiwgXCJwYXNzXCIsIFwiaG9zdFwiLCBcInBvcnRcIiwgXCJwYXRoXCIsIFwicXVlcnlcIiwgXCJoYXNoXCIgXSxcblx0X3F1ZXJ5OiBmdW5jdGlvbiAobWl4ZWQpIHtcblx0XHRpZiAobWl4ZWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucXVlcnkgfHwgbnVsbDtcblx0XHR9XG5cdFx0aWYgKHplc2suaXNfc3RyaW5nKG1peGVkKSkge1xuXHRcdFx0aWYgKG1peGVkLmNoYXJBdCgwKSAhPT0gXCI/XCIpIHtcblx0XHRcdFx0bWl4ZWQgPSBcIj9cIiArIG1peGVkO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoemVzay5pc19vYmplY3QobWl4ZWQpKSB7XG5cdFx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHRcdCQuZWFjaChtaXhlZCwgZnVuY3Rpb24gKGspIHtcblx0XHRcdFx0aWYgKHRoaXMgPT09IG51bGwgfHwgdGhpcyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMgPT09IFwiXCIpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoaykgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzKSk7XG5cdFx0XHR9KTtcblx0XHRcdG1peGVkID0gXCI/XCIgKyBpdGVtcy5qb2luKFwiJlwiKTtcblx0XHR9XG5cdFx0dGhpcy5xdWVyeSA9IG1peGVkO1xuXHRcdHRoaXMudW5wYXJzZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXHRkZWZhdWx0X3BvcnQ6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcG9ydHMgPSB7XG5cdFx0XHRcImh0dHBcIjogODAsXG5cdFx0XHRcImh0dHBzXCI6IDQ0Myxcblx0XHRcdFwiZnRwXCI6IDIxXG5cdFx0fTtcblx0XHRyZXR1cm4gcG9ydHNbdGhpcy5zY2hlbWVdIHx8IG51bGw7XG5cdH0sXG5cdHBhcnNlOiBmdW5jdGlvbiAodXJsKSB7XG5cdFx0dmFyIHBhcnNlciA9IGQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdHBhcnNlci5ocmVmID0gdXJsO1xuXHRcdHRoaXMudXJsID0gdXJsO1xuXHRcdHRoaXMuc2NoZW1lID0gU3RyaW5nKHBhcnNlci5wcm90b2NvbCkucmVwbGFjZSgvOiQvLCAnJyk7XG5cdFx0dGhpcy5ob3N0ID0gcGFyc2VyLmhvc3RuYW1lO1xuXHRcdHRoaXMucG9ydCA9IHBhcnNlci5wb3J0O1xuXHRcdHRoaXMucGF0aCA9IHBhcnNlci5wYXRobmFtZTtcblx0XHR0aGlzLnF1ZXJ5ID0gcGFyc2VyLnNlYXJjaDtcblx0XHR0aGlzLmhhc2ggPSBwYXJzZXIuaGFzaDtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblx0dW5wYXJzZTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB1c2VyID0gdGhpcy51c2VyID8gKHRoaXMudXNlciArICh0aGlzLnBhc3MgPyBcIjpcIiArIHRoaXMucGFzcyA6IFwiXCIpICsgXCJAXCIpIDogXCJcIjtcblx0XHR2YXIgcG9ydCA9IHRoaXMucG9ydCA/ICh0aGlzLnBvcnQgPT09IHRoaXMuZGVmYXVsdF9wb3J0KCkgPyBcIlwiIDogXCI6XCIgKyB0aGlzLnBvcnQpIDogXCJcIjtcblx0XHR2YXIgcHJlZml4ID0gdGhpcy5zY2hlbWUgPyB0aGlzLnNjaGVtZSArIFwiOlwiIDogXCJcIjtcblx0XHR2YXIgdWhwID0gdGhpcy5ob3N0ID8gXCIvL1wiICsgdXNlciArIHRoaXMuaG9zdCArIHBvcnQgOiBcIlwiO1xuXHRcdHRoaXMudXJsID0gcHJlZml4ICsgdWhwICsgdGhpcy5wYXRoICsgdGhpcy5xdWVyeSArICh0aGlzLmhhc2ggPyB0aGlzLmhhc2ggOiBcIlwiKTtcblx0XHRyZXR1cm4gdGhpcy51cmw7XG5cdH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBVUkw7XG4iXX0=